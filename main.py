import logging
import asyncio
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN
from handlers import Handlers
import database

async def init(dp):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool = await database.create_pool()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await database.create_tables()

    bot = Bot(token=TELEGRAM_TOKEN)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç bot
    handlers = Handlers(pool, bot)

    dp.register_message_handler(handlers.start_command, commands=["start"])
    dp.register_message_handler(handlers.currency_rates, lambda message: message.text == "üá∫üá¶–ö—É—Ä—Å –≤–∞–ª—é—Ç")
    dp.register_message_handler(handlers.stats, lambda message: message.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.register_message_handler(handlers.crypto, lambda message: message.text == "ü§ë–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
    dp.register_message_handler(handlers.ads, lambda message: message.text == "‚úâÔ∏è–†–µ–∫–ª–∞–º–∞")
    dp.register_message_handler(handlers.start_broadcast, lambda message: message.text.startswith("/broadcast"))
    dp.register_message_handler(handlers.process_broadcast_message)




logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)  # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ bot —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init(dp))
    executor.start_polling(dp, skip_updates=True)
