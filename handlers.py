from aiogram import types
from config import ADMIN_ID
from api import get_exchange_rate, get_crypto_rate
from database import add_new_user, get_user_count, get_all_users, is_admin
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


class Handlers:
    def __init__(self, pool, bot):
        self.pool = pool
        self.bot = bot

    async def start_command(self, message: types.Message):
        user_id = message.from_user.id
        await add_new_user(self.pool, user_id)
        await self.update_last_activity(user_id)
        markup = await self.generate_main_menu_markup()
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –ø–æ–∫–∞–∑—É—î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å —Ñ—ñ–∞—Ç–Ω–∏—Ö –≤–∞–ª—é—Ç —ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.", reply_markup=markup)

    async def generate_main_menu_markup(self):
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for item in [("üá∫üá¶–ö—É—Ä—Å –≤–∞–ª—é—Ç", "currency_rates"), ("ü§ë–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "crypto"), ("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats"),
                     ("‚úâÔ∏è–†–µ–∫–ª–∞–º–∞", "ads"), ]:
            markup.insert(KeyboardButton(item[0]))
        return markup

    async def currency_rates(self, message: types.Message):
        usd_uah = await get_exchange_rate(840)  # USD
        eur_uah = await get_exchange_rate(978)  # EUR

        if usd_uah is None or eur_uah is None:
            await message.answer("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        await message.answer(
            f"<b>üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è</b>\n\n üá∫üá∏USD/UAH <b>{usd_uah} </b> \nüá™üá∫ EUR/UAH <b>{eur_uah}</b>\n\n"
            f"–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏: @ExchangeMonitorBot",
            parse_mode='HTML')

    async def crypto(self, message: types.Message):
        btc_rate = await get_crypto_rate('BTC')
        eth_rate = await get_crypto_rate('ETH')
        xrp_rate = await get_crypto_rate('XRP')
        doge_rate = await get_crypto_rate('DOGE')
        ada_rate = await get_crypto_rate('ADA')
        sol_rate = await get_crypto_rate('SOL')

        response = f"<b>–ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n" \
                   f"üîπ Bitcoin (BTC): ${btc_rate}\n" \
                   f"üîπ Ethereum (ETH): ${eth_rate}\n" \
                   f"üîπ XRP (XRP): ${xrp_rate}\n" \
                   f"üîπ Dogecoin (DOGE): ${doge_rate}\n" \
                   f"üîπ Cardano (ADA): ${ada_rate}\n" \
                   f"üîπ Solana (ETH): ${sol_rate}\n\n"\
                    f"–ê–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏: @ExchangeMonitorBot"
        await message.answer(response, parse_mode='HTML')

    async def ads(self, message: types.Message):
        contact_admin_text = (
            "–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ —Ä–µ–∫–ª–∞–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            "\n\nüë§ [–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–æ–º](tg://user?id={admin_id})"
        )
        await message.answer(contact_admin_text.format(admin_id=ADMIN_ID), parse_mode="Markdown")

    async def get_active_user_count(self):
        async with self.pool.acquire() as connection:
            query = """
            SELECT COUNT(*)
            FROM users
            WHERE last_activity > NOW() - INTERVAL '7 days'
            """
            active_user_count = await connection.fetchval(query)
            return active_user_count

    async def stats(self, message: types.Message):
        if message.from_user.id != ADMIN_ID:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        user_count = await get_user_count(self.pool)
        active_user_count = await get_active_user_count(self.pool)

        response = (
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_count}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_user_count}"
        )
        await message.answer(response)

    async def update_last_activity(self, user_id):
        async with self.pool.acquire() as connection:
            query = """
            UPDATE users
            SET last_activity = NOW()
            WHERE id = $1
            """
            await connection.execute(query, user_id)

    async def start_broadcast(self, message: types.Message):
        if not await is_admin(self.pool, message.from_user.id):
            await message.reply("–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            return
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏:")

    async def process_broadcast_message(self, message: types.Message):
        text_to_broadcast = message.text

        user_ids = await get_all_users(self.pool)
        for user_id in user_ids:
            try:
                await self.bot.send_message(user_id, text_to_broadcast)
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∞–¥—Ä–µ—Å—É {user_id}: {e}")

        await message.reply("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")



